name: Deploy to Google Cloud Run

on:
  pull_request:
    branches: [main, master]
    types: [closed]
  workflow_dispatch: # Allows manual triggering
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'nightly'
        type: choice
        options:
          - nightly
          - production

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'

    # Set environment based on target branch or manual input
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.event.pull_request.base.ref == 'master' && 'production' || 'nightly') }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [ "$GITHUB_REF_NAME" == "master" ] || [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> $GITHUB_ENV
            echo "SERVICE_NAME=sync-gsheet" >> $GITHUB_ENV
            echo "REGION=${{ vars.REGION || 'asia-southeast1' }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "MEMORY=${{ vars.PROD_MEMORY || '2Gi' }}" >> $GITHUB_ENV
            echo "CPU=${{ vars.PROD_CPU || '2' }}" >> $GITHUB_ENV
            echo "MAX_INSTANCES=${{ vars.PROD_MAX_INSTANCES || '20' }}" >> $GITHUB_ENV
            echo "PORT=${{ vars.PORT || '3000' }}" >> $GITHUB_ENV
          else
            echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> $GITHUB_ENV
            echo "SERVICE_NAME=sync-gsheet" >> $GITHUB_ENV
            echo "REGION=${{ vars.REGION || 'asia-southeast1' }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=nightly" >> $GITHUB_ENV
            echo "MEMORY=${{ vars.NIGHTLY_MEMORY || '1Gi' }}" >> $GITHUB_ENV
            echo "CPU=${{ vars.NIGHTLY_CPU || '1' }}" >> $GITHUB_ENV
            echo "MAX_INSTANCES=${{ vars.NIGHTLY_MAX_INSTANCES || '5' }}" >> $GITHUB_ENV
            echo "PORT=${{ vars.PORT || '3000' }}" >> $GITHUB_ENV
          fi

      - name: Enable pnpm
        run: corepack enable pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_FIREBASE_API_KEY="${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_DATABASE_URL="${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_PROJECT_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_APP_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" \
            --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID="${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}" \
            -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .

      - name: Push Docker image
        run: docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port $PORT \
            --memory $MEMORY \
            --cpu $CPU \
            --max-instances $MAX_INSTANCES \
            --set-env-vars="NODE_ENV=$ENVIRONMENT,NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }},NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }},NEXT_PUBLIC_FIREBASE_DATABASE_URL=${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }},NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }},NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }},NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }},NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }},NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}"

      - name: Get service URL
        id: url
        run: |
          echo "url=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')" >> $GITHUB_OUTPUT

      - name: Show deployment result
        run: |
          echo "🚀 Deployment successful!"
          echo "🎯 Environment: $ENVIRONMENT"
          echo "🏷️  Service: $SERVICE_NAME"
          echo "🌐 Service URL: ${{ steps.url.outputs.url }}"
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "📦 Deployed PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"
            echo "👤 Merged by: ${{ github.event.pull_request.merged_by.login }}"
            echo "🌿 Target branch: ${{ github.event.pull_request.base.ref }}"
          fi
          echo "📝 Don't forget to update your OAuth settings with the new URL!"
